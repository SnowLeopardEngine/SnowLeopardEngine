{
    "DzShader": {
        "Name": "Standard/StandardDeferred",
        "Properties": [
            {
                "Name": "albedo",
                "Type": "Color",
                "Value": "(1, 1, 1, 1)"
            },
            {
                "Name": "albedoMap",
                "Type": "Texture2D",
                "Value": ""
            },
            {
                "Name": "useAlbedoMap",
                "Type": "Int",
                "Value": "0"
            },
            {
                "Name": "metallic",
                "Type": "Float",
                "Value": "0.0"
            },
            {
                "Name": "metallicMap",
                "Type": "Texture2D",
                "Value": ""
            },
            {
                "Name": "useMetallicMap",
                "Type": "Int",
                "Value": "0"
            },
            {
                "Name": "roughness",
                "Type": "Float",
                "Value": "1.0"
            },
            {
                "Name": "roughnessMap",
                "Type": "Texture2D",
                "Value": ""
            },
            {
                "Name": "useRoughnessMap",
                "Type": "Int",
                "Value": "0"
            },
            {
                "Name": "ao",
                "Type": "Float",
                "Value": "0"
            },
            {
                "Name": "aoMap",
                "Type": "Texture2D",
                "Value": ""
            },
            {
                "Name": "useAoMap",
                "Type": "Int",
                "Value": "0"
            }
        ],
        "InstancedPropertyNames": [],
        "Resources": [
            {
                "Name": "gBuffer",
                "Type": "GBuffer_PBR",
                "Data": "gPosition;gNormal;gAlbedoMetallic;gRoughnessAOEntityID"
            }
        ],
        "PipelineStates": {},
        "Tags": {
            "RenderQueue": "Geometry",
            "LightingMode": "Deferred"
        },
        "Keywords": [
            "DEFERRED_LIGHTING"
        ],
        "Passes": [
            {
                "Name": "PBR_GeometryPass_Deferred",
                "PipelineStates": {
                    "BlendMode": "Disable"
                },
                "Tags": {},
                "ResourcesToBind": [
                    "gBuffer"
                ],
                "ResourcesToUse": [],
                "Stages": [
                    {
                        "Name": "vertex",
                        "LanguageType": "GLSL",
                        "EntryPoint": "main",
                        "ShaderSource": "#version 450\n\n#include \"LegacySceneUniform.glsl\"\n\nlayout(location = 0) in vec3 aPos;\nlayout(location = 1) in vec3 aNormal;\nlayout(location = 2) in vec2 aTexCoords;\nlayout(location = 3) in int aEntityID;\n\nlayout(location = 0) out vec2 varingTexCoords;\nlayout(location = 1) flat out int varingEntityID;\nlayout(location = 2) out vec3 worldNormal;\nlayout(location = 3) out vec3 fragPos;\n\nvoid main() {\n    varingTexCoords = aTexCoords;\n    varingEntityID = aEntityID;\n    worldNormal = transpose(inverse(mat3(model))) * aNormal;\n    vec4 worldPos = model * vec4(aPos, 1.0);\n    fragPos = worldPos.xyz;\n    gl_Position = projection * view * worldPos;\n}"
                    },
                    {
                        "Name": "fragment",
                        "LanguageType": "GLSL",
                        "EntryPoint": "main",
                        "ShaderSource": "#version 450\n\n#include \"PBR.glsl\"\n\nlayout(location = 0) in vec2 varingTexCoords;\nlayout(location = 1) flat in int varingEntityID;\nlayout(location = 2) in vec3 worldNormal;\nlayout(location = 3) in vec3 fragPos;\n\nlayout (location = 0) out vec4 gPosition;\nlayout (location = 1) out vec4 gNormal;\nlayout (location = 2) out vec4 gAlbedoMetallic;\nlayout (location = 3) out vec4 gRoughnessAOEntityID;\n\nlayout(location = 0) uniform vec4 albedo;\nlayout(location = 1) uniform sampler2D albedoMap;\nlayout(location = 2) uniform int useAlbedoMap;\nlayout(location = 3) uniform float metallic;\nlayout(location = 4) uniform sampler2D metallicMap;\nlayout(location = 5) uniform int useMetallicMap;\nlayout(location = 6) uniform float roughness;\nlayout(location = 7) uniform sampler2D roughnessMap;\nlayout(location = 8) uniform int useRoughnessMap;\nlayout(location = 9) uniform float ao;\nlayout(location = 10) uniform sampler2D aoMap;\nlayout(location = 11) uniform int useAoMap;\n\nvoid main() {\n    PBRMaterial material;\n    material.albedo = (1 - useAlbedoMap) * albedo.rgb + useAlbedoMap * texture(albedoMap, varingTexCoords).rgb;\n    material.metallic = (1 - useMetallicMap) * metallic + useMetallicMap * texture(metallicMap, varingTexCoords).r;\n    material.roughness = (1 - useRoughnessMap) * roughness + useRoughnessMap * texture(roughnessMap, varingTexCoords).r;\n    material.ao = (1 - useAoMap) * ao + useAoMap * texture(aoMap, varingTexCoords).r;\n\n    gPosition = vec4(fragPos, 1);\n    gNormal = vec4(normalize(worldNormal), 1);\n    gAlbedoMetallic.rgb = material.albedo;\n    gAlbedoMetallic.a = material.metallic;\n    gRoughnessAOEntityID.r = material.roughness;\n    gRoughnessAOEntityID.g = material.ao;\n    gRoughnessAOEntityID.b = varingEntityID;\n    gRoughnessAOEntityID.a = 1;\n}"
                    }
                ]
            },
            {
                "Name": "PBR_LightingPass_Deferred",
                "PipelineStates": {},
                "Tags": {},
                "ResourcesToBind": [],
                "ResourcesToUse": [
                    "gBuffer",
                    "shadowMap"
                ],
                "Stages": [
                    {
                        "Name": "vertex",
                        "LanguageType": "GLSL",
                        "EntryPoint": "main",
                        "ShaderSource": "#version 450\n\n#include \"LegacySceneUniform.glsl\"\n\nlayout(location = 0) in vec3 aPos;\nlayout(location = 2) in vec2 aTexCoords;\n\nlayout(location = 0) out vec2 varingTexCoords;\n\nvoid main() {\n    varingTexCoords = aTexCoords;\n    gl_Position = vec4(aPos, 1.0);\n}"
                    },
                    {
                        "Name": "fragment",
                        "LanguageType": "GLSL",
                        "EntryPoint": "main",
                        "ShaderSource": "#version 450\n\n#include \"PBRLighting.glsl\"\n\nlayout (location = 0) in vec2 varingTexCoords;\n\nlayout (location = 0) uniform mat4 lightSpaceMatrix;\nlayout (location = 1) uniform sampler2D gPosition;\nlayout (location = 2) uniform sampler2D gNormal;\nlayout (location = 3) uniform sampler2D gAlbedoMetallic;\nlayout (location = 4) uniform sampler2D gRoughnessAOEntityID;\nlayout (location = 5) uniform sampler2D shadowMap;\nlayout (location = 6) uniform DirectionalLight directionalLight;\n\nlayout (location = 0) out vec4 color0;\nlayout (location = 1) out int color1;\n\nvoid main() {\n    PBRMaterial material;\n\n    // Retrieve data from gbuffer\n    vec3 fragPos = texture(gPosition, varingTexCoords).rgb;\n    vec3 worldNormal = texture(gNormal, varingTexCoords).rgb;\n    vec4 albedoMetallic = texture(gAlbedoMetallic, varingTexCoords);\n    material.albedo = albedoMetallic.rgb;\n    material.metallic = albedoMetallic.a;\n    vec4 roughnessAOEntityID = texture(gRoughnessAOEntityID, varingTexCoords);\n    material.roughness = roughnessAOEntityID.r;\n    material.ao = roughnessAOEntityID.g;\n    vec4 fragPosLightSpace = lightSpaceMatrix * vec4(fragPos, 1.0);\n\n    vec3 viewDir = normalize(viewPos - fragPos);\n    \n    color0 = vec4(CalPBRLighting(directionalLight, worldNormal, viewDir, material, fragPosLightSpace, shadowMap), 1);\n    color1 = int(roughnessAOEntityID.b);\n}"
                    }
                ]
            }
        ]
    }
}